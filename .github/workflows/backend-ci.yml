# .github/workflows/backend-ci.yml

name: CI for Backend Services and Update Manifest

on:
  push:
    branches:
      - dev
    paths:
      - 'B.E/**'  # B.E 디렉토리 하위의 모든 변경에 대해 실행

jobs:
  # 변경된 서비스가 무엇인지 결정하는 작업
  determine-service:
    runs-on: ubuntu-latest
    outputs:
      service_name: ${{ steps.get-service-name.outputs.service }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 모든 히스토리 가져오기 (변경분 감지를 위해)

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44

      - name: Determine changed service name
        id: get-service-name
        run: |
          # 변경된 파일 목록에서 서비스 이름 추출 (예: B.E/user-service/...)
          SERVICE_NAME=""
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ "$file" == B.E/* ]]; then
              SERVICE_NAME=$(echo "$file" | cut -d'/' -f2)
              break # 첫 번째로 감지된 서비스 이름 사용
            fi
          done
          
          if [ -z "$SERVICE_NAME" ]; then
            echo "No changes detected in any B.E service."
            exit 0
          fi
          
          echo "Changed service: $SERVICE_NAME"
          echo "service=$SERVICE_NAME" >> $GITHUB_OUTPUT

  # 결정된 서비스를 빌드하고, 이미지를 푸시하고, 매니페스트를 업데이트하는 작업
  build-and-update:
    needs: determine-service # determine-service 작업이 성공해야 실행
    if: needs.determine-service.outputs.service_name != '' # 서비스 이름이 있을 때만 실행
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: ap-northeast-2
      SERVICE_NAME: ${{ needs.determine-service.outputs.service_name }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. Amazon ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Java(JDK) 및 Gradle 환경 설정
      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 5. Docker 이미지 빌드 및 ECR 푸시
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # working-directory를 동적으로 설정하여 해당 서비스 디렉토리에서 빌드
        run: |
          docker build -t $ECR_REGISTRY/${{ env.SERVICE_NAME }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.SERVICE_NAME }}:$IMAGE_TAG
        working-directory: ./B.E/${{ env.SERVICE_NAME }}

      # 6. Manifest 레포지토리 체크아웃
      - name: Checkout Manifest Repository
        uses: actions/checkout@v4
        with:
          # HTTPS 주소로 변경. 예: your-org/k8s-manifest-repo
          repository: sang3jeom/k8s-manifest-repo
          # ssh-key 대신 token을 사용하고, 시크릿 이름도 변경
          token: ${{ secrets.MANIFEST_REPO_PAT }}
          path: k8s-manifest-repo

      # 7. Helm values.yaml 파일 업데이트
      - name: Install yq and update image tag
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          # 동적으로 해당 서비스의 values.yaml 파일 경로를 지정하여 이미지 태그 업데이트
          yq e '.image.tag = "${{ env.IMAGE_TAG }}"' -i k8s-manifest-repo/charts/${{ env.SERVICE_NAME }}/values.yaml

      # 8. Manifest 레포지토리에 변경사항 커밋 및 푸시
      - name: Commit and push manifest changes
        run: |
          cd k8s-manifest-repo
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Update image to ${{ env.IMAGE_TAG }} for ${{ env.SERVICE_NAME }}"
          git push
